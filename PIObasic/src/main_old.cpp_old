#include <Arduino.h>
#include <Wire.h>

int readI2COutputSignal(int &out, const size_t &nbytes = 2);

// ---------------------------------------------------------

const static int REFERENCE_SIGNAL_PIN = A3;        // PIN potenciometer (A3)
const static int CONTROL_SIGNAL_PIN = 5;           // PIN pre PWM (D5)
const static int OUTPUT_SIGNAL_I2C_ADDRESS = 0x36; // I2C adresa pre uhol natocenia ramena
const static int BUILT_IN_LED_PIN = 13;            // PIN pre zabudovanu LED

// --------------------------------------------------------- BUILD-IN LED BLINK
const unsigned long T_sample = 1000;
const unsigned long LED_onTime = 100;

// --------------------------------------------------------- CALIBRATION DATA
static int PHI_INIT = 0; // uhol natocenia ramena pri inicializacii
static int PHI_MAX = 0;  // uhol natocenia ramena pri poslednej aktualizacii

// ---------------------------------------------------------
int REFERENCE_SIGNAL = 0;   // potenciometer
int OUTPUT_SIGNAL = 0;      // uhol natocenia ramena (I2C bus)
int OUTPUT_SIGNAL_LAST = 0; // uhol natocenia ramena pri poslednej aktualizacii
int CONTROL_SIGNAL = 0;     // PWM pre motor (matlab -> SPI bus)

unsigned long time_curr;
unsigned long time_tick = 0;
unsigned long time_delta;

unsigned long time_curr_data;

bool LED_on = false;

// --------------------------------------------------------- Calibration functions
void calibrate()
{
  readI2COutputSignal(PHI_INIT); // Read initial angle from I2C device
  PHI_MAX = PHI_INIT + 1024;     // save startangle value + 1024(90°).(for mapping purpose) (problems will occur if the arm is supposed to rotate more than 90°)
}

void fixEncoderOverflow(int &phi, const int &phi_last)
{
  static int phi_fault_3k = 0;       // static variable to count the number of times the overflow occurs
  static int phi_fault_after_3k = 0; // static variable to count the number of times the overflow occurs after 3000

  if (phi > 3700 && phi < 3975 && phi_last > 4094) // Empirical values for overflow detection
  {
    if (phi_fault_3k == 0)
    {
      phi_fault_3k = phi;
    }
    phi = 4096 + phi - phi_fault_3k; // fix overflow
  }
  else if (phi < 1200)
  {
    if (phi_fault_after_3k == 0)
    {
      phi_fault_after_3k = phi_last; // save the last value before overflow
    }
    phi = phi_fault_after_3k + phi; // fix overflow
  }
}

// ---------------------------------------------------------

void setup()
{
  // Initialize I2C communication as Master
  Wire.begin();
  calibrate(); // Call the calibration function to set initial values

  // Initialize Serial communication
  // Set the baud rate to 115200 for communication with the Serial Monitor
  Serial.begin(115200);
  Serial.println("--- MCU starting ---");

  Serial.print(time_curr_data);
  Serial.print(" ");
  Serial.print(REFERENCE_SIGNAL);
  Serial.print(" ");
  Serial.print(PHI_INIT);
  Serial.print(" ");
  Serial.print(CONTROL_SIGNAL);
  Serial.print(" ");
  Serial.print("\n");

  pinMode(BUILT_IN_LED_PIN, OUTPUT);           // for LED (D13)
  pinMode(CONTROL_SIGNAL_PIN, OUTPUT);         // for PWM (D5)
  pinMode(REFERENCE_SIGNAL_PIN, INPUT_PULLUP); // for potenciometer (A3)
}

// ---------------------------------------------------------

int recvByte()
{
  if (Serial.available() > 0)
  {
    CONTROL_SIGNAL = Serial.read();
    return 0;
  }
  return 1;
}

int readI2COutputSignal(int &out, const size_t &nbytes)
{
  // Prepare I2C communication
  Wire.beginTransmission(OUTPUT_SIGNAL_I2C_ADDRESS); // Start communication with the I2C device
  Wire.write(0x0c);
  Wire.write(0x0d);
  Wire.endTransmission(); // End the transmission to prepare for reading

  // Read OUTPUT_SIGNAL from I2C device at OUTPUT_SIGNAL_I2C_ADDRESS
  Wire.requestFrom(OUTPUT_SIGNAL_I2C_ADDRESS, nbytes); // Request 2 bytes from the I2C device (uint16_t)
  if (Wire.available() >= nbytes)
  {
    out = 0; // Initialize output to 0

    for (size_t i = 0; i < nbytes; i++)
    {
      out = (Wire.read() << (8 * i)) | out; // Read each byte
    }

    // byte lowByte = Wire.read();
    // byte highByte = Wire.read();
    // OUTPUT_SIGNAL = (highByte << 8) | lowByte;

    return 0; // Success
  }
  return 1; // Error: Not enough bytes available
}

void processNewData()
{

  if (recvByte())
  {
    // No new data received
    return;
  }

  time_curr_data = millis();

  // Convert the received character to an integer value (potentiometer value)
  REFERENCE_SIGNAL = analogRead(REFERENCE_SIGNAL_PIN);

  readI2COutputSignal(OUTPUT_SIGNAL); // Can be used in an if statement to check for errors
  // Fix overflow in the encoder reading
  fixEncoderOverflow(OUTPUT_SIGNAL, OUTPUT_SIGNAL_LAST);

  OUTPUT_SIGNAL_LAST = OUTPUT_SIGNAL; // Save the last output signal for overflow check

  // Manual testing of the control signal using the potentiometer
  // CONTROL_SIGNAL = REFERENCE_SIGNAL / 1024.0 * 255 - 5; // Map the potentiometer value to a PWM value (0-255)
  // CONTROL_SIGNAL = constrain(CONTROL_SIGNAL, 0, 255);   // Ensure the

  // Write the CONTROL_SIGNAL to the PWM pin
  // The CONTROL_SIGNAL is expected to be in the range of 0-255 for PWM
  analogWrite(CONTROL_SIGNAL_PIN, CONTROL_SIGNAL);

  // Print the current time and the signals to the Serial Monitor
  Serial.print(time_curr_data);
  Serial.print(" ");
  Serial.print(REFERENCE_SIGNAL);
  Serial.print(" ");
  Serial.print(OUTPUT_SIGNAL);
  Serial.print(" ");
  Serial.print(CONTROL_SIGNAL);
  Serial.print(" ");
  Serial.print("\n");
}

// ---------------------------------------------------------

void buildInLedBlink()
{
  time_delta = time_curr - time_tick;

  if (LED_on == true)
  {
    if (time_delta >= LED_onTime)
    {
      digitalWrite(13, LOW);
      LED_on = false;
    }
  }

  if (time_delta >= T_sample)
  {
    time_tick = time_curr;

    digitalWrite(13, HIGH);
    LED_on = true;
  }
}

// ---------------------------------------------------------

void loop()
{
  time_curr = millis();

  processNewData();

  buildInLedBlink();

  delay(2);
}